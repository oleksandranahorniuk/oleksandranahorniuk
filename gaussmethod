import numpy as np
def Gauss(a1, b1):
    n=len(b1)
    for k in range(0,n-1):
        for i in range(k+1,n):
            if a1[i,k] != 0.0:
            
                a1[i,k+1:n]=a1[i,k+1:n]-a1[i,k]/a1[k,k]*a1[k,k+1:n]
                b1[i]=b1[i]-a1[i,k]/a1[k,k]*b1[k]
    for k in range(n-1,-1,-1):
        b1[k]=(b1[k]-np.dot(a1[k,k+1:n], b1[k+1:n]))/a1[k,k]
    return b1
       
def rev(a1,b1):
    result=np.linalg.inv(a1)*b1
    return result
   
a1 = np.matrix([[1, 2,-1],[3, 4, 1] ,[5 ,1, -3]])
b1 = np.matrix([[-3] ,[1], [-2]])
result1 = np.linalg.solve(a1, b1)
print('Gauss solve', '\n', result1)
print("Gauss manual:",'\n', Gauss(np.matrix([[1, 2,-1],[3, 4, 1] ,[5 ,1, -3]]) ,np.matrix([[-3] ,[1], [-2]])))
print("reversed matrix:",'\n', rev(a1,b1))
