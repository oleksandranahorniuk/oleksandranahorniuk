import numpy as np

a1 = np.array([[14, 4,6],[5, -3, 2] ,[10 ,-11, 5]])
b1 = np.array([[30] ,[15], [36]])
result1 = np.linalg.solve(a1, b1)
print('Метод Крамера', '\n', result1)



def Kramer(a1, b1):
   a1_det=np.linalg.det(a1)
   if (a1_det!=0):
       x_m = np.matrix(a1)
       x_m[:,0] = b1
       x_mdet = np.linalg.det(x_m)
       x_m_r = x_mdet / a1_det

       y_m = np.matrix(a1)
       y_m[:,1] = b1
       y_mdet = np.linalg.det(y_m)
       y_m_r = y_mdet / a1_det

       z_m = np.matrix(a1)
       z_m[:,2] = b1
       z_mdet = np.linalg.det(z_m)
       z_m_r = z_mdet / a1_det
       print(x_m_r, y_m_r, z_m_r)
   else:
       print("There aren't roots")
   return x_m_r, y_m_r, z_m_r

print("Result of Kramera", "\n", Kramer(np.array([[14, 4,6],[5, -3, 2] ,[10 ,-11, 5]]), np.array([[30] ,[15], [36]])))

def matrix1(a1, b1):
   a1_inv=np.linalg.inv(a1)
   result=a1_inv*b1
   print(result)
   return result


print("Result of matrix", "\n", matrix1(np.array([[1, 2,-1],[3,4,1] ,[5,1,-3]]), np.array([[-3] ,[1], [-2]])))

